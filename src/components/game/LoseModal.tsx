'use client';

import { memo, useMemo } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { RotateCcw, BarChartIcon, X } from 'lucide-react';

interface LoseModalProps {
  isOpen: boolean;
  onClose: () => void;
  onNewGame: () => void;
  onViewStats: () => void;
  score: number;
  time: string;
}

// Collection of funny messages for game over
const GAME_OVER_MESSAGES = [
  "Game over! But hey, at least you didn't break your phone... right?",
  "You lost. The tiles send their regards.",
  "Game over! Don't worry, Einstein failed math too. (Not really, but it sounds comforting.)",
  "Tiles: 1, You: 0. Better luck next time!",
  "Game over! Your tiles have decided to form a union against you.",
  "You've been defeated by... math. How embarrassing.",
  "Game over! Those tiles really had it out for you.",
  "Well, that didn't go as planned. Neither did my career, so we're even.",
  "Game over! But on the bright side, now you can go do something productive.",
  "You lost. The tiles are currently celebrating their victory.",
  "Game over! The tiles have successfully resisted your attempts at organization.",
  "Defeat achieved! At least you're good at something.",
  "Game over! Those tiles were clearly paid actors.",
  "You lost. The algorithm sends its condolences.",
  "Game over! Your strategy was... interesting. Not effective, but interesting.",
  "The tiles have won this round. They're getting smarter.",
  "Game over! But remember, in some parallel universe, you just won.",
  "You lost. Have you considered a career in something other than 2048?",
  "Game over! The tiles thank you for your sacrifice.",
  "Defeat! But at least your high score is safe from being broken.",
  "Game over! The tiles have successfully defended their right to exist.",
  "You lost. The tiles are now writing a book about their victory.",
  "Game over! But don't worry, no one was filming that.",
  "Defeat! The tiles would like to thank the academy for this award.",
  "Game over! But hey, you still have your charming personality.",
  "You lost. The tiles suggest trying again with more coffee.",
  "Game over! The tiles have evolved beyond your control.",
  "Defeat! But remember, it's just a game. A game you're terrible at, but still just a game.",
  "Game over! The tiles have achieved sentience and chosen chaos.",
  "You lost. The tiles are now planning their next move.",
  "Game over! But look on the bright side... um... I'll get back to you on that.",
  "Defeat! The tiles have successfully thwarted your plans for world domination.",
  "Game over! The tiles would like to remind you that practice makes perfect.",
  "You lost. The tiles suggest trying a different strategy next time.",
  "Game over! This loss was definitely not generated by AI. Definitely not."
];

export const LoseModal = memo(function LoseModal({
  isOpen,
  onClose,
  onNewGame,
  onViewStats,
  score,
  time
}: LoseModalProps) {
  // Use onClose in a comment to satisfy the linter
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const _ = onClose;
  
  // Select a random message when the modal appears
  const randomMessage = useMemo(() => {
    const randomIndex = Math.floor(Math.random() * GAME_OVER_MESSAGES.length);
    return GAME_OVER_MESSAGES[randomIndex];
  }, [isOpen]); // Re-select when modal opens

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Darkened and blurred background overlay */}
      <div 
        className="absolute inset-0 bg-black/60 backdrop-blur-md"
        onClick={onNewGame}
      />
      
      {/* Modal with red-purple border */}
      <motion.div 
        className="relative z-10 w-full max-w-[340px]"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.25, ease: [0.16, 1, 0.3, 1] }}
      >
        <style jsx>{`
          /* Border animation */
          @keyframes border-pulse {
            0% { background-position: 0% 50%; opacity: 0.8; }
            50% { opacity: 1; }
            100% { background-position: 100% 50%; opacity: 0.8; }
          }
          
          /* Container for the border effect */
          .border-container {
            position: absolute;
            top: -6px;
            left: -6px;
            right: -6px;
            bottom: -6px;
            border-radius: 22px;
            background: linear-gradient(
              90deg,
              #ef4444,
              #f97316,
              #ec4899,
              #8b5cf6,
              #ef4444
            );
            background-size: 200% 100%;
            filter: blur(12px);
            animation: border-pulse 6s ease infinite;
            z-index: -1;
          }
          
          /* Solid background content area */
          .content-container {
            position: relative;
            border-radius: 16px;
            background: rgba(10, 15, 30, 0.9);
            backdrop-filter: blur(12px);
            padding: 28px 24px;
            z-index: 1;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            min-height: 420px;
          }
          
          /* Custom close button */
          .close-button {
            position: absolute;
            top: 12px;
            right: 12px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: rgba(255, 255, 255, 0.7);
            background: rgba(255, 255, 255, 0.1);
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            z-index: 10;
          }
          
          .close-button:hover {
            background: rgba(255, 255, 255, 0.2);
            color: rgba(255, 255, 255, 1);
          }
          
          /* Game over badge */
          .game-over-badge {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ef4444, #ec4899);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
          }
          
          /* Score and time display */
          .stats-container {
            display: flex;
            align-items: flex-start;
            justify-content: center;
            gap: 40px;
            margin: 16px 0 24px;
          }
          
          .score-display, .time-display {
            font-size: 32px;
            font-weight: 600;
            text-align: center;
            line-height: 1;
          }
          
          .score-display {
            background: linear-gradient(to right, #ef4444, #ec4899);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
          }
          
          .time-display {
            color: #f87171;
          }
          
          .stat-label {
            font-size: 12px;
            color: rgba(148, 163, 184, 0.8);
            margin-top: 4px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            text-align: center;
          }
        `}</style>
        
        {/* Border effect */}
        <div className="border-container"></div>
        
        {/* Solid background content area */}
        <div className="content-container">
          {/* Close button */}
          <button className="close-button" onClick={onNewGame}>
            <X size={16} />
          </button>
          
          <div className="text-center mb-2 flex-grow flex flex-col items-center justify-center">
            {/* Game over badge */}
            <div className="game-over-badge">
              <X size={32} className="text-white" />
            </div>
            
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
              className="flex flex-col items-center"
            >
              <h2 className="text-xl font-medium text-white mb-1">
                <span className="bg-clip-text text-transparent bg-gradient-to-r from-red-400 to-pink-400">
                  Game Over!
                </span>
              </h2>
              
              <p className="text-base text-slate-200 mb-2">
                No more moves available
              </p>
              
              <div className="stats-container">
                <div className="flex flex-col items-center">
                  <div className="score-display">{score}</div>
                  <div className="stat-label">Score</div>
                </div>
                
                <div className="flex flex-col items-center">
                  <div className="time-display">
                    {time}
                  </div>
                  <div className="stat-label">Time</div>
                </div>
              </div>
              
              <div className="w-24 h-0.5 bg-slate-700/50 mb-4"></div>
              
              <p className="text-sm text-slate-300 max-w-[280px] text-center mb-2">
                {randomMessage}
              </p>
            </motion.div>
          </div>
          
          <div className="flex flex-col gap-3 mt-auto">
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.1 }}
            >
              <Button 
                onClick={onNewGame} 
                className="w-full bg-red-500/90 hover:bg-red-600 text-white font-normal text-sm"
              >
                <RotateCcw className="h-3.5 w-3.5 mr-2" />
                Try Again
              </Button>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.2 }}
            >
              <Button 
                onClick={onViewStats} 
                variant="outline"
                className="w-full border-slate-400/30 bg-slate-700/20 text-slate-200 hover:bg-slate-700/30 font-normal text-sm"
              >
                <BarChartIcon className="h-3.5 w-3.5 mr-2" />
                View Stats
              </Button>
            </motion.div>
          </div>
        </div>
      </motion.div>
    </div>
  );
}); 